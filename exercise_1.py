# -*- coding: utf-8 -*-
"""ML_Homework-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b0OhLEsJo5owg9Hx2_UH5VMfkDn3097B
"""

# Task 1: LP1

import numpy as np
y = 1
w = np.array([1,-1,2])
x = np.array([3,2,1])

result = y * np.dot(w, x)

if result >= 0:
  print("y(t)w^T(t)x(t) < 0, indicating misclassification")
else:
  print("y(t)w^T(t)x(t) >= 0, indicating a correct classification")

# Task-2: LP1

import sympy as sp
w0, w1, w2, m ,c = sp.symbols('w0 w1 w2 m c')

trad_line = sp.Eq(w2 * c - w0 * m, w1)
sol = sp.solve((trad_line.subs(c, 0), trad_line), (m, c))

sol

# Task-4

import numpy as np
import matplotlib.pyplot as plt

# Load the data from the file
with open('ZipDigits.train', 'r') as file:
    lines = file.readlines()

# empty lists to store data
labels = []
features = []

# Filter and preprocess the data
for line in lines:
    data = line.strip().split()
    label = int(float(data[0]))
    if label in [1, 5]:
        labels.append(1 if label == 1 else -1)
        feature_values = [float(val) for val in data[1:]]
        features.append(feature_values)

# Convert to NumPy arrays
labels = np.array(labels)
features = np.array(features)

# intensity and symmetry functions
def intensity(image):
    return np.sum(image)

def symmetry(image):
    half_len = len(image) // 2
    left_half = image[:half_len]
    right_half = image[half_len:]
    left_avg = np.mean(left_half)
    right_avg = np.mean(right_half)
    return abs(left_avg - right_avg)

# intensity and symmetry features for each data point
intensity_features = np.apply_along_axis(intensity, axis=1, arr=features)
symmetry_features = np.apply_along_axis(symmetry, axis=1, arr=features)

# a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(intensity_features[labels == 1], symmetry_features[labels == 1], c='blue', label='Digit 1', marker='o')
plt.scatter(intensity_features[labels == -1], symmetry_features[labels == -1], c='red', label='Digit 5', marker='x')
plt.xlabel('Intensity Feature')
plt.ylabel('Symmetry Feature')
plt.legend()
plt.title('Scatter Plot of Intensity vs. Symmetry Features')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Load the data from the 'ZipDigits.test' file
with open('ZipDigits.test', 'r') as file:
    lines = file.readlines()

# empty lists to store data
test_labels = []
test_features = []

# Filter and preprocess the test data
for line in lines:
    data = line.strip().split()
    label = int(float(data[0]))  # Convert to float and then to int
    if label in [1, 5]:
        test_labels.append(1 if label == 1 else -1)
        feature_values = [float(val) for val in data[1:]]
        test_features.append(feature_values)

# Convert test data to NumPy arrays
test_labels = np.array(test_labels)
test_features = np.array(test_features)

# intensity and symmetry features for each test data point
test_intensity_features = np.apply_along_axis(intensity, axis=1, arr=test_features)
test_symmetry_features = np.apply_along_axis(symmetry, axis=1, arr=test_features)

# scatter plot for the test data
plt.figure(figsize=(8, 6))
plt.scatter(test_intensity_features[test_labels == 1], test_symmetry_features[test_labels == 1], c='blue', label='Digit 1', marker='o')
plt.scatter(test_intensity_features[test_labels == -1], test_symmetry_features[test_labels == -1], c='red', label='Digit 5', marker='x')
plt.xlabel('Intensity Feature')
plt.ylabel('Symmetry Feature')
plt.legend()
plt.title('Scatter Plot of Intensity vs. Symmetry Features (Test Data)')
plt.grid(True)
plt.show()