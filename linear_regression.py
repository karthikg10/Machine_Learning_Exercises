# -*- coding: utf-8 -*-
"""Linear regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zTKJENAEQkSA_AoIHtRXRAdchjVtjJng
"""

import numpy as np
import matplotlib.pyplot as plt

import random

## Generates N random points for logistic regression on a line w
def generate_lr(N=20,w0=0,w1=1):
    n = 0
    X1 = []
    Y = []
    while(n < N):
        x1 = random.uniform(-10,10)
        x2 = random.uniform(-1,1)
        y = w0 + w1*x1 + x2
        X1.append(x1)
        Y.append(y)
        n += 1
    data = [np.array([1,X1[i],Y[i]]) for i in range(N)]
    return data

f_w0, f_w1 = 1, 1
N = 50
data = generate_lr(N, f_w0, f_w1)

def abline(slope, intercept, label_text):
    """Plot a line from slope and intercept"""
    axes = plt.gca()
    x_vals = np.array(axes.get_xlim())
    y_vals = intercept + slope * x_vals
    plt.plot(x_vals, y_vals, '--', label = "x_2="+str(slope)+"x_1+"+str(intercept) )

X1 = [i[1] for i in data]
Y  = [i[2] for i in data]
markers = [] #'o' or '+'
colors = [] # 'b' or 'r'
cnt = 0
plt.scatter(X1,Y, s = 10)

abline(f_w1,f_w0, 'True target function')
plt.show()

X = [[i[0], i[1]] for i in data]
Y  = [i[2] for i in data]

xTx = np.matmul(np.transpose(X), X)
xTx.shape

xTx_inv = np.linalg.inv(xTx)
xTx_inv.shape
xTx_inv

X_pi = np.matmul(xTx_inv, np.transpose(X))
X_pi

w = np.matmul(X_pi, Y)
w

import numpy as np
import matplotlib.pyplot as plt
import random

# Generates N random points for logistic regression on a line w
def generate_lr(N=20, w0=0, w1=1):
    n = 0
    X1 = []
    Y = []
    while n < N:
        x1 = random.uniform(-10, 10)
        x2 = random.uniform(-1, 1)
        y = w0 + w1 * x1 + x2
        X1.append(x1)
        Y.append(y)
        n += 1
    data = [np.array([1, X1[i], Y[i]]) for i in range(N)]
    return data

# True target function parameters
f_w0, f_w1 = 1, 1
N = 50
data = generate_lr(N, f_w0, f_w1)

# Define a function to plot the target function
def abline(slope, intercept, label_text):
    """Plot a line from slope and intercept"""
    axes = plt.gca()
    x_vals = np.array(axes.get_xlim())
    y_vals = intercept + slope * x_vals
    plt.plot(x_vals, y_vals, '--', label=label_text)

X1 = [i[1] for i in data]
Y = [i[2] for i in data]

# Scatter plot of data points
plt.scatter(X1, Y, s=10, label='Data Points')

# Plot the true target function
abline(f_w1, f_w0, 'True Target Function')

# Linear Regression
X = [[i[0], i[1]] for i in data]
Y = [i[2] for i in data]
xTx = np.matmul(np.transpose(X), X)
xTx_inv = np.linalg.inv(xTx)
X_pi = np.matmul(xTx_inv, np.transpose(X))
w = np.matmul(X_pi, Y)

# Plot the linear regression hypothesis
abline(w[1], w[0], 'Linear Regression Hypothesis')

# Add labels and legend
plt.xlabel('X1')
plt.ylabel('Y')
plt.legend()
plt.title('Linear Regression for Target Function Estimation')
plt.grid(True)

# Show the plot
plt.show()

# Display the estimated weights
print('Estimated Weights (intercept, slope):', w)

